================================================================================
single binding
================================================================================
module Test exports (..)

test = let five = 5 in unit
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_let
      (expression_let_value_declaration
        binder: (pattern_variable)
        expression: (expression_int))
      (expression_unit))))

================================================================================
single binding type annotated
================================================================================
module Test exports (..)

test = let five: Int = 5 in unit
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_let
      (expression_let_value_declaration
        binder: (pattern_variable)
        type_annotation: (type_annotation
          (type_constructor
            (type_constructor_proper_name)))
        expression: (expression_int))
      (expression_unit))))

================================================================================
multiple bindings
================================================================================
module Test exports (..)

test =
    let
        five: Int = 5
        six = 6
        seven = 7
    in
    unit
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_let
      (expression_let_value_declaration
        binder: (pattern_variable)
        type_annotation: (type_annotation
          (type_constructor
            (type_constructor_proper_name)))
        expression: (expression_int))
      (expression_let_value_declaration
        binder: (pattern_variable)
        expression: (expression_int))
      (expression_let_value_declaration
        binder: (pattern_variable)
        expression: (expression_int))
      (expression_unit))))

================================================================================
pattern binders
================================================================================
module Test exports (..)

test = 
    let
        Wrapped(five) = wrapped_five
        Pair(six, seven) : Pair(Int, Int) = pair
    in
    unit
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_let
      (expression_let_value_declaration
        binder: (pattern_constructor
          (pattern_constructor_proper_name)
          (pattern_constructor_fields
            field: (pattern_variable)))
        expression: (expression_variable
          (expression_variable_name)))
      (expression_let_value_declaration
        binder: (pattern_constructor
          (pattern_constructor_proper_name)
          (pattern_constructor_fields
            field: (pattern_variable)
            field: (pattern_variable)))
        type_annotation: (type_annotation
          (type_call
            function: (type_constructor
              (type_constructor_proper_name))
            arguments: (type_call_arguments
              argument: (type_constructor
                (type_constructor_proper_name))
              argument: (type_constructor
                (type_constructor_proper_name)))))
        expression: (expression_variable
          (expression_variable_name)))
      (expression_unit))))
