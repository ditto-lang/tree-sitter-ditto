================================================================================
variable
================================================================================
module Test exports (..);

x : a = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_variable))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
constructor
================================================================================
module Test exports (..);

x : My.Unit = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_constructor
        (qualifier)
        (type_constructor_proper_name)))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
constructor call
================================================================================
module Test exports (..);

x : R.Result(Int, b) = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_call
        function: (type_constructor
          (qualifier)
          (type_constructor_proper_name))
        arguments: (type_call_arguments
          argument: (type_constructor
            (type_constructor_proper_name))
          argument: (type_variable))))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
variable call
================================================================================
module Test exports (..);

x : f(Int, b) = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_call
        function: (type_variable)
        arguments: (type_call_arguments
          argument: (type_constructor
            (type_constructor_proper_name))
          argument: (type_variable))))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
function
================================================================================
module Test exports (..);

x : (Int) -> (a, b) -> Int = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_function
        parameter: (type_constructor
          (type_constructor_proper_name))
        return_type: (type_function
          parameter: (type_variable)
          parameter: (type_variable)
          return_type: (type_constructor
            (type_constructor_proper_name)))))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
empty closed record
================================================================================
module Test exports (..);

x : {} = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_closed_record))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
closed record
================================================================================
module Test exports (..);

x : { foo: Int, bar: Float, baz: Unit } = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_closed_record
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))))
    expression: (expression_variable
      (expression_variable_name))))

================================================================================
open record
================================================================================
module Test exports (..);

x : { r | foo: Int, bar: Float, baz: Unit, } = x;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_open_record
        (type_open_record_row_variable)
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))
        field: (type_record_field
          label: (type_record_field_label)
          value: (type_constructor
            (type_constructor_proper_name)))))
    expression: (expression_variable
      (expression_variable_name))))
