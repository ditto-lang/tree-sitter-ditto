================================================================================
bind
================================================================================
module Test exports (..)

x = do {
    x <- expr_x;
    y <- expr_y;
    z <- expr_z;
    return [x, y, z]
}
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_effect
      (expression_effect_bind
        bind_name: (expression_effect_bind_name)
        bind_expression: (expression_variable
          (expression_variable_name))
        rest: (expression_effect_bind
          bind_name: (expression_effect_bind_name)
          bind_expression: (expression_variable
            (expression_variable_name))
          rest: (expression_effect_bind
            bind_name: (expression_effect_bind_name)
            bind_expression: (expression_variable
              (expression_variable_name))
            rest: (expression_effect_return
              (expression_array
                element: (expression_variable
                  (expression_variable_name))
                element: (expression_variable
                  (expression_variable_name))
                element: (expression_variable
                  (expression_variable_name))))))))))

================================================================================
let
================================================================================
module Test exports (..)

x = do {
    let x = expr_x;
    let y: Int = expr_y;
    let z: Int = expr_z;
    return [x, y, z]
}
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_effect
      (expression_effect_let
        let_binder: (expression_effect_let_binder
          pattern: (pattern_variable))
        let_expression: (expression_variable
          (expression_variable_name))
        rest: (expression_effect_let
          let_binder: (expression_effect_let_binder
            pattern: (pattern_variable)
            type_annotation: (type_annotation
              (type_constructor
                (type_constructor_proper_name))))
          let_expression: (expression_variable
            (expression_variable_name))
          rest: (expression_effect_let
            let_binder: (expression_effect_let_binder
              pattern: (pattern_variable)
              type_annotation: (type_annotation
                (type_constructor
                  (type_constructor_proper_name))))
            let_expression: (expression_variable
              (expression_variable_name))
            rest: (expression_effect_return
              (expression_array
                element: (expression_variable
                  (expression_variable_name))
                element: (expression_variable
                  (expression_variable_name))
                element: (expression_variable
                  (expression_variable_name))))))))))

================================================================================
discard
================================================================================
module Test exports (..)

x = do {
    fire_missiles();
    return 5
}
--------------------------------------------------------------------------------

(source_file
  (module_header
    (module_name)
    (exposing_everything))
  (value_declaration
    (value_declaration_name)
    (expression_effect
      (expression_effect_expression
        (expression_call
          (expression_variable
            (expression_variable_name))
          (expression_call_arguments))
        (expression_effect_return
          (expression_int))))))

================================================================================
return
================================================================================
module Test exports (..)

x = do { return 5 }
--------------------------------------------------------------------------------

(source_file
  (module_header
    (module_name)
    (exposing_everything))
  (value_declaration
    (value_declaration_name)
    (expression_effect
      (expression_effect_return
        (expression_int)))))

================================================================================
noop
================================================================================
module Test exports (..)

main = do { return unit }
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_effect
      (expression_effect_return
        (expression_unit)))))
