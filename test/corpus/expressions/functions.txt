================================================================================
nullary
================================================================================
module Test exports (..)

x = fn (): Int -> 5
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      return_type: (return_type_annotation
        (type_constructor
          (type_constructor_proper_name)))
      body: (expression_int))))

================================================================================
unary
================================================================================
module Test exports (..)

x = fn (y) -> 5
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      body: (expression_int))))

================================================================================
binary
================================================================================
module Test exports (..)

x = fn (y, z) -> 5
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      body: (expression_int))))

================================================================================
trailing comma
================================================================================
module Test exports (..)

x = fn (y, ) -> 5
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      body: (expression_int))))

================================================================================
multiline
================================================================================
module Test exports (..)

x = fn (
    x,
    y,
) -> z
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      body: (expression_variable
        (expression_variable_name)))))

================================================================================
type annotated
================================================================================
module Test exports (..)

x = fn (x: T, y): T -> 5
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable)
        type_annotation: (type_annotation
          (type_constructor
            (type_constructor_proper_name))))
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      return_type: (return_type_annotation
        (type_constructor
          (type_constructor_proper_name)))
      body: (expression_int))))

================================================================================
identity
================================================================================
module Test exports (..)

x = fn (a: a): a -> a
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable)
        type_annotation: (type_annotation
          (type_variable)))
      return_type: (return_type_annotation
        (type_variable))
      body: (expression_variable
        (expression_variable_name)))))

================================================================================
always
================================================================================
module Test exports (..)

x = fn (a, _) -> a
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable))
      parameter: (expression_function_parameter
        pattern: (pattern_unused))
      body: (expression_variable
        (expression_variable_name)))))

================================================================================
curried
================================================================================
module Test exports (..)

x = fn (a: a): ((b) -> a) -> fn (b) -> a
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        pattern: (pattern_variable)
        type_annotation: (type_annotation
          (type_variable)))
      return_type: (return_type_annotation
        (type_function
          parameter: (type_variable)
          return_type: (type_variable)))
      body: (expression_function
        parameter: (expression_function_parameter
          pattern: (pattern_variable))
        body: (expression_variable
          (expression_variable_name))))))

================================================================================
curried call
================================================================================
module Test exports (..)

x = a()()()
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_call
      function: (expression_call
        function: (expression_call
          function: (expression_variable
            (expression_variable_name))
          arguments: (expression_call_arguments))
        arguments: (expression_call_arguments))
      arguments: (expression_call_arguments))))

================================================================================
iife
================================================================================
module Test exports (..)

x : Int = (fn () -> fn () ->  5)()()
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_constructor
        (type_constructor_proper_name)))
    expression: (expression_call
      function: (expression_call
        function: (expression_function
          body: (expression_function
            body: (expression_int)))
        arguments: (expression_call_arguments))
      arguments: (expression_call_arguments))))
