module Foo.Bar exports (..);
-- <- keyword
--      ^ namespace
--               ^ keyword
--                       ^ symbol

-- NOTE: btw
-- TODO: finish this
-- XXX: delete this
-- FIXME: fix this

import (some-package) Some.Module;
-- <- keyword
--                       ^ namespace
--                        ^ namespace
--                         ^ namespace

import (some-other-package) Some.Other.Module as SOM;
--                                             ^ keyword
--                                                ^ namespace

import Foo (..);
--           ^ symbol
import Foo.Bar (
  Baz, 
-- ^ type
  Foo(..),
--    ^ symbol
  foo, 
  bar, 
);

type Maybe(a) = Just(a) | Nothing;
-- <- keyword
--     ^ type
--         ^ parameter
--                ^ constructor

five : Int = 5;
--      ^ type
--           ^ number 
floaty_five : Prim.Float = 5.0;
--             ^ namespace
--                   ^ type
--                          ^ float
fives = [1, 2, 3, 4, 5,];

maybe_five = Just(5);
--            ^ constructor

qualified_maybe_five = Maybe.Just(5);
--                       ^ namespace

yes = true; 
--     ^ boolean
no = false;
--     ^ boolean
g = unit;
--   ^ none

identity = (a: a): a -> a;
-- <- function
--             ^ parameter
--                    ^ operator

bad_map = (xs: Array(a), fn: (a) -> b): Array(b) -> [];
--              ^ type
--                                ^ type


type Unknown;

foreign null: Unknown;
-- ^ keyword

silly_if = if true then 5 else 5;
--         ^ conditional
--                  ^ conditional
--                         ^ conditional
silly_match = match five with | Foo.Five -> 5;
--             ^ conditional
--                        ^ conditional
--                                   ^ constructor
