================================================================================
nullary function
================================================================================
module Test exports (..);

x = fn (): Int -> 5;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      return_type: (return_type_annotation
        (type_constructor
          (type_constructor_proper_name)))
      body: (expression_int))))

================================================================================
identity
================================================================================
module Test exports (..);

x = fn (a: a): a -> a;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        name: (expression_function_parameter_name)
        type_annotation: (type_annotation
          (type_variable)))
      return_type: (return_type_annotation
        (type_variable))
      body: (expression_variable
        (expression_variable_name)))))

================================================================================
curried
================================================================================
module Test exports (..);

x = fn (a: a): ((b) -> a) -> fn (b) -> a;
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        name: (expression_function_parameter_name)
        type_annotation: (type_annotation
          (type_variable)))
      return_type: (return_type_annotation
        (type_function
          parameter: (type_variable)
          return_type: (type_variable)))
      body: (expression_function
        parameter: (expression_function_parameter
          name: (expression_function_parameter_name))
        body: (expression_variable
          (expression_variable_name))))))

================================================================================
nullary call
================================================================================
module Test exports (..);

x = a();
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_call
      function: (expression_variable
        (expression_variable_name))
      arguments: (expression_call_arguments))))

================================================================================
tertiary call
================================================================================
module Test exports (..);

x = a(1, 2, 3);
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_call
      function: (expression_variable
        (expression_variable_name))
      arguments: (expression_call_arguments
        argument: (expression_int)
        argument: (expression_int)
        argument: (expression_int))))
  (comment))

================================================================================
curried call
================================================================================
module Test exports (..);

x = a()()();
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_call
      function: (expression_call
        function: (expression_call
          function: (expression_variable
            (expression_variable_name))
          arguments: (expression_call_arguments))
        arguments: (expression_call_arguments))
      arguments: (expression_call_arguments))))

================================================================================
array map
================================================================================
module Test exports (..);

map = fn (arr: Array(a), f: (a) -> b): Array(b) -> [];
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    expression: (expression_function
      parameter: (expression_function_parameter
        name: (expression_function_parameter_name)
        type_annotation: (type_annotation
          (type_call
            function: (type_constructor
              (type_constructor_proper_name))
            arguments: (type_call_arguments
              argument: (type_variable)))))
      parameter: (expression_function_parameter
        name: (expression_function_parameter_name)
        type_annotation: (type_annotation
          (type_function
            parameter: (type_variable)
            return_type: (type_variable))))
      return_type: (return_type_annotation
        (type_call
          function: (type_constructor
            (type_constructor_proper_name))
          arguments: (type_call_arguments
            argument: (type_variable))))
      body: (expression_array))))

================================================================================
iife
================================================================================
module Test exports (..);

x : Int = (fn () -> fn () ->  5)()();
--------------------------------------------------------------------------------

(source_file
  header: (module_header
    module_name: (module_name)
    exports: (exposing_everything))
  declaration: (value_declaration
    name: (value_declaration_name)
    type_annotation: (type_annotation
      (type_constructor
        (type_constructor_proper_name)))
    expression: (expression_call
      function: (expression_call
        function: (expression_function
          body: (expression_function
            body: (expression_int)))
        arguments: (expression_call_arguments))
      arguments: (expression_call_arguments))))
